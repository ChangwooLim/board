isUnique <- function(i){
length(which(duplicated(i))) == 0
}
zero <- function(i){
cnt <- length(which(i==0))
rat <- cnt / length(i) * 100
return(list(cnt = cnt, rat = rat))
}
brief(iris,exc = 5)
corgroup <- function(inputData, i, exc = NULL){
cn <- colnames(inputData)
hc <- rep(0, length(cn))
vs <- rep(0, length(cn))
names(hc) <- cn
names(vs) <- cn
idx <- setdiff(1:ncol(inputData), exc)
print(idx)
for(j in idx){
if(cn[i] != cn[j]){
cc <- round(cor(inputData[,i], inputData[,j]), 3)
vs[j] <- cc
if(abs(cc) > 0.2){ hc[j] = 1 }
if(abs(cc) > 0.4){ hc[j] = 2 }
if(abs(cc) > 0.6){ hc[j] = 3 }
if(abs(cc) > 0.8){ hc[j] = 4 }
}
}
return(list(hc = hc, vs = vs))
}
brief(iris,exc = 5)
brief <- function(inputData, exc = NULL){
# dataset description
nr <- nrow(inputData)
nc <- ncol(inputData)
cnt <- length(which(is.na(inputData)))
rat <- cnt / (nc * nr) * 100
print(paste0('nrow : ', nr, ', ncol: ', nc, ', missing cell count: ', cnt, ', missing cell ratio: ', rat))
## cardinality
for(i in 1:nc){
card <- cardinality(inputData[,i])
if(card$hc){
print(
paste0(colnames(inputData)[i] , ' has high cardinality: ', card$dv, ' distinct values')
)
}
}
## correlation group
for(i in setdiff(1:nc, exc)){
corg <- corgroup(inputData, i)
idx <- which(corg$hc == 4)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has extremely high correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 3)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has high correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 2)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 1)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has weak correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
}
## missing
for(i in 1:nc){
m <- missing(inputData[,i])
if(m$cnt >0){
print(
paste0(colnames(inputData)[i], ' has missing value: ', m$cnt, ' = ', m$rat, '%')
)
}
}
## zero
for(i in 1:nc){
z <- zero(inputData[,i])
if(z$cnt >0){
print(
paste0(colnames(inputData)[i], ' has zero : ', z$cnt, ' = ', z$rat, '%')
)
}
}
## uniform
for(i in 1:nc){
if(isUniform(inputData[,i]))
print(
paste0(colnames(inputData)[i], 'is uniformly distributed')
)
}
## unique
for(i in 1:nc){
if(isUniform(inputData[,i]))
print(
paste0(colnames(inputData)[i], 'has unique values')
)
}
}
cardinality <- function(i){
dv <- length(unique(i))
hc <- (dv > 20)
return(list(hc = hc, dv = dv))
}
corgroup <- function(inputData, i){
cn <- colnames(inputData)
hc <- rep(0, length(cn))
vs <- rep(0, length(cn))
names(hc) <- cn
names(vs) <- cn
for(j in 1:ncol(inputData)){
if(cn[i] != cn[j]){
cc <- round(cor(inputData[,i], inputData[,j]), 3)
vs[j] <- cc
if(abs(cc) > 0.2){ hc[j] = 1 }
if(abs(cc) > 0.4){ hc[j] = 2 }
if(abs(cc) > 0.6){ hc[j] = 3 }
if(abs(cc) > 0.8){ hc[j] = 4 }
}
}
return(list(hc = hc, vs = vs))
}
missing <- function(i){
cnt <- length(which(is.na(i)))
rat <- cnt / length(i) * 100
return(list(cnt = cnt, rat = rat))
}
isUniform <- function(i){
length(unique(table(i))) == 1
}
isUnique <- function(i){
length(which(duplicated(i))) == 0
}
zero <- function(i){
cnt <- length(which(i==0))
rat <- cnt / length(i) * 100
return(list(cnt = cnt, rat = rat))
}
brief(iris,exc = 5)
corgroup(iris,1)
brief <- function(inputData, exc = NULL){
# dataset description
nr <- nrow(inputData)
nc <- ncol(inputData)
cnt <- length(which(is.na(inputData)))
rat <- cnt / (nc * nr) * 100
print(paste0('nrow : ', nr, ', ncol: ', nc, ', missing cell count: ', cnt, ', missing cell ratio: ', rat))
## cardinality
for(i in 1:nc){
card <- cardinality(inputData[,i])
if(card$hc){
print(
paste0(colnames(inputData)[i] , ' has high cardinality: ', card$dv, ' distinct values')
)
}
}
## correlation group
for(i in setdiff(1:nc, exc)){
corg <- corgroup(inputData[,-exc], i)
idx <- which(corg$hc == 4)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has extremely high correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 3)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has high correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 2)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 1)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has weak correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
}
## missing
for(i in 1:nc){
m <- missing(inputData[,i])
if(m$cnt >0){
print(
paste0(colnames(inputData)[i], ' has missing value: ', m$cnt, ' = ', m$rat, '%')
)
}
}
## zero
for(i in 1:nc){
z <- zero(inputData[,i])
if(z$cnt >0){
print(
paste0(colnames(inputData)[i], ' has zero : ', z$cnt, ' = ', z$rat, '%')
)
}
}
## uniform
for(i in 1:nc){
if(isUniform(inputData[,i]))
print(
paste0(colnames(inputData)[i], 'is uniformly distributed')
)
}
## unique
for(i in 1:nc){
if(isUniform(inputData[,i]))
print(
paste0(colnames(inputData)[i], 'has unique values')
)
}
}
brief(iris,exc = 5)
brief <- function(inputData, exc = NULL){
# dataset description
nr <- nrow(inputData)
nc <- ncol(inputData)
cnt <- length(which(is.na(inputData)))
rat <- cnt / (nc * nr) * 100
print(paste0('nrow : ', nr, ', ncol: ', nc, ', missing cell count: ', cnt, ', missing cell ratio: ', rat))
## cardinality
for(i in 1:nc){
card <- cardinality(inputData[,i])
if(card$hc){
print(
paste0(colnames(inputData)[i] , ' has high cardinality: ', card$dv, ' distinct values')
)
}
}
## correlation group
for(i in setdiff(1:nc, exc)){
corg <- corgroup(inputData[,-exc], i)
idx <- which(corg$hc == 4)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has extremely high correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 3)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has high correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 2)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 1)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has weak correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
}
## missing
for(i in 1:nc){
m <- missing(inputData[,i])
if(m$cnt >0){
print(
paste0(colnames(inputData)[i], ' has missing value: ', m$cnt, ' = ', m$rat, '%')
)
}
}
## zero
for(i in 1:nc){
z <- zero(inputData[,i])
if(z$cnt >0){
print(
paste0(colnames(inputData)[i], ' has zero : ', z$cnt, ' = ', z$rat, '%')
)
}
}
## uniform
for(i in 1:nc){
if(isUniform(inputData[,i]))
print(
paste0(colnames(inputData)[i], ' is uniformly distributed')
)
}
## unique
for(i in 1:nc){
if(isUniform(inputData[,i]))
print(
paste0(colnames(inputData)[i], ' has unique values')
)
}
}
brief(iris,exc = 5)
isUnique(iris[,5])
brief <- function(inputData, exc = NULL){
# dataset description
nr <- nrow(inputData)
nc <- ncol(inputData)
cnt <- length(which(is.na(inputData)))
rat <- cnt / (nc * nr) * 100
print(paste0('nrow : ', nr, ', ncol: ', nc, ', missing cell count: ', cnt, ', missing cell ratio: ', rat))
## cardinality
for(i in 1:nc){
card <- cardinality(inputData[,i])
if(card$hc){
print(
paste0(colnames(inputData)[i] , ' has high cardinality: ', card$dv, ' distinct values')
)
}
}
## correlation group
for(i in setdiff(1:nc, exc)){
corg <- corgroup(inputData[,-exc], i)
idx <- which(corg$hc == 4)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has extremely high correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 3)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has high correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 2)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
idx <- which(corg$hc == 1)
if(length(idx)>0){
print(
paste0(colnames(inputData)[i], ' has weak correlation with : ', paste0(names(idx), collapse = ', '), 'as values : ', paste0(corg$vs[idx], collapse = ', '))
)
}
}
## missing
for(i in 1:nc){
m <- missing(inputData[,i])
if(m$cnt >0){
print(
paste0(colnames(inputData)[i], ' has missing value: ', m$cnt, ' = ', m$rat, '%')
)
}
}
## zero
for(i in 1:nc){
z <- zero(inputData[,i])
if(z$cnt >0){
print(
paste0(colnames(inputData)[i], ' has zero : ', z$cnt, ' = ', z$rat, '%')
)
}
}
## uniform
for(i in 1:nc){
if(isUniform(inputData[,i]))
print(
paste0(colnames(inputData)[i], ' is uniformly distributed')
)
}
## unique
for(i in 1:nc){
if(isUnique(inputData[,i]))
print(
paste0(colnames(inputData)[i], ' has unique values')
)
}
}
brief(iris,exc = 5)
cor(iris[,-5])
round(cor(iris[,-5]),3)
'1 (1%)'
unif
brief <- function(inputData, exc = NULL){
# dataset description
nr <- nrow(inputData)
nc <- ncol(inputData)
cnt <- length(which(is.na(inputData)))
rat <- cnt / (nc * nr) * 100
desc <- c(nr, nc, cnt, rat)
names(desc) <- c('nrow', 'ncol','missingCellCount', 'missingCellRatio')
cards <- c()
## cardinality
for(i in 1:nc){
card <- cardinality(inputData[,i])
if(card$hc){
cards <- c(cards, card$dv)
names(cards)[length(cards)] <- colnames(inputData[i])
}
}
cors <- cor(inputData[,-exc])
## missing
miss <- c()
for(i in 1:nc){
m <- missing(inputData[,i])
if(m$cnt >0){
miss <- c(miss, paste0(m$cnt, ' (', m$rat, ')%'))
names(miss)[length(miss)] <- colnames(inputData)[i]
}
}
zeros <- c()
## zero
for(i in 1:nc){
z <- zero(inputData[,i])
if(z$cnt >0){
zeros <- c(miss, paste0(z$cnt, ' (', z$rat, ')%'))
names(zeros)[length(zeros)] <- colnames(inputData)[i]
}
}
## uniform
unif <- which(sapply(1:nc, function(i){isUniform(inputData[,i])}))
## unique
uniq <- which(sapply(1:nc, function(i){isUnique(inputData[,i])}))
return(list(
desc = desc,
cards = cards,
miss = miss,
zeros = zeros,
unif = unif,
uniq = uniq
))
}
library(board)
board::brief(iris)
board::brief(iris[,-0])
iris[,]
iris[,-]
library(board)
board::brief(iris, 5)
?which
library(board)
board::brief(iris,5)
icon('right')
?icon
shiny::icon('right')
shiny::icon('right', verify_fa = FALSE)
?shiny::icon('right', verify_fa = FALSE)
?shiny::icon('angle-right', verify_fa = FALSE)
shiny::icon('angle-right', verify_fa = FALSE)
shiny::icon('angle-right')
library(board)
library(board)
icon('up-down-left-right')
shiny::icon('up-down-left-right')
shiny::icon('up-down-left-right', lib = 'font-awesome')
shiny::icon('expand', lib = 'font-awesome')
obj
library(board)
install.packages('GGally')
library(board)
z
library(board)
library(board)
library(board)
brief(mtcars)
brief <- function(inputData, exc = NULL){
# dataset description
nr <- nrow(inputData)
nc <- ncol(inputData)
cnt <- length(which(is.na(inputData)))
rat <- cnt / (nc * nr) * 100
desc <- list(nrow = nr, ncol = nc, missingCellCount = cnt, missingCellRatio = rat)
## cardinality
cards <- sapply(1:nc, function(i){cardinality(inputData[,i])})
## correlation
if(is.null(exc)){
cors <- cor(inputData)
}
else{
cors <- cor(inputData[,-exc])
}
## missing
miss <- c()
miss <- sapply(1:nc, function(i){
m <- missing(inputData[,i])
return(paste0(m$cnt, ' (', m$rat, '%)'))
})
## zero
zeros <- sapply(1:nc, function(i){
z <- zero(inputData[,i])
return(paste0(z$cnt, ' (', z$rat, '%)'))
})
## uniform
unif <- sapply(1:nc, function(i){isUniform(inputData[,i])})
## unique
uniq <- sapply(1:nc, function(i){isUnique(inputData[,i])})
return(list(
desc = desc,
cards = cards,
cors = cors,
miss = miss,
zeros = zeros,
unif = unif,
uniq = uniq
))
}
brief(mtcars)
library(board)
